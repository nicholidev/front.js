name: 🌒 Nightly Release

on:
  schedule:
    - cron: "0 7 * * *" # every day at 12AM PST

jobs:
  # HEADS UP! this "nightly" job will only ever run on the `main` branch due to it being a cron job,
  # and the last commit on main will be what github shows as the trigger
  # however in the checkout below we specify the `dev` branch, so all the scripts
  # in this job will be ran from that, confusing i know, so in some cases we'll need to create
  # multiple PRs when modifying nightly release processes
  nightly:
    name: 🌒 Nightly Release
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    outputs:
      # allows this to be used in the `comment` job below - will be undefined if there's no release necessary
      NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3
        with:
          ref: dev
          # checkout using a custom token so that we can push later on
          token: ${{ secrets.NIGHTLY_PAT }}
          fetch-depth: 0

      - name: ⎔ Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"

      - name: 📥 Install deps
        # even though this is called "npm-install" it does use yarn to install
        # because we have a yarn.lock and caches efficiently.
        uses: bahmutov/npm-install@v1

      - name: ⤴️ Update Version if needed
        id: version
        run: |
          # get latest commit sha
          SHA=$(git rev-parse HEAD)
          SHORT_SHA=${SHA::7}

          # get latest nightly tag
          LATEST_NIGHTLY_TAG=$(git tag -l v0.0.0-nightly-\* --sort=-taggerdate | head -n 1)

          # check if last commit to dev starts would be the nightly tag we're about to create (minus the date)
          # if it is, we'll skip the nightly creation
          # if not, we'll create a new nightly tag
          if [[ ${LATEST_NIGHTLY_TAG} == v0.0.0-nightly-${SHORT_SHA}-* ]]; then
            echo "🛑 Latest nightly tag is the same as the latest commit sha, skipping nightly release"
          else
            git config --local user.email "hello@remix.run"
            git config --local user.name "Remix Run Bot"

            DATE=$(date '+%Y%m%d')
            NEXT_VERSION=0.0.0-nightly-${SHORT_SHA}-${DATE}
            echo ::set-output name=NEXT_VERSION::${NEXT_VERSION}

            git checkout -b nightly/${NEXT_VERSION}

            if [ -z "$(git status --porcelain)" ]; then
              echo "✨"
            else
              echo "dirty working directory..."
              git add .
              git commit -m "dirty working directory..."
            fi

            yarn run version ${NEXT_VERSION} --skip-prompt
          fi

      - name: 🏗 Build
        if: steps.version.outputs.NEXT_VERSION
        run: yarn build

      - name: 🏷 Push Tag
        if: steps.version.outputs.NEXT_VERSION
        run: git push origin --tags

      - name: 🔐 Setup npm auth
        if: steps.version.outputs.NEXT_VERSION
        run: |
          echo "registry=https://registry.npmjs.org" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: 🚀 Publish
        if: steps.version.outputs.NEXT_VERSION
        run: npm run publish

      - name: 🐱 Create GitHub release
        uses: actions/create-release@v1
        if: steps.version.outputs.NEXT_VERSION
        with:
          draft: false
          prerelease: true
          release_name: v${{ steps.version.outputs.NEXT_VERSION }}
          tag_name: v${{ steps.version.outputs.NEXT_VERSION }}
        env:
          # need this token in order to have it trigger the comment and deployment test workflows
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_PAT }}

  comment:
    needs: [nightly]
    name: 📝 Comment on related issues and pull requests
    if: github.repository == 'remix-run/remix' && needs.nightly.outputs.NEXT_VERSION
    uses: remix-run/remix/.github/workflows/release-comments.yml@main
    with:
      ref: "refs/tags/v${{ needs.nightly.outputs.NEXT_VERSION }}"

  deployments:
    needs: [nightly]
    name: 🚀 Deployment Tests
    if: github.repository == 'remix-run/remix' && needs.nightly.outputs.NEXT_VERSION
    uses: remix-run/remix/.github/workflows/deployments.yml@main

  stacks:
    needs: [nightly]
    name: 🥞 Remix Stacks Test
    if: github.repository == 'remix-run/remix' && needs.nightly.outputs.NEXT_VERSION
    uses: remix-run/remix/.github/workflows/stacks.yml@main
    with:
      version: "${{ needs.nightly.outputs.NEXT_VERSION }}"
