name: release
on:
  release:
    types: [published]

jobs:
  build:
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Setup npm auth
        run: |
          echo "registry=https://registry.npmjs.org" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Publish
        run: npm run publish

  arc_deploy:
    name: Architect Deploy
    needs: [build]
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - run: mkdir -p deployment-test

      - name: Install latest version of npm
        run: npm install -g npm@latest

      - name: Deploy to Arc
        run: node ./scripts/deployment-test/arc.mjs
        env:
          CI: true
          AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}

  cf_pages_deploy:
    name: "CF Pages Deploy"
    needs: [build]
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - run: mkdir -p deployment-test

      - name: Install latest version of npm
        run: npm install -g npm@latest

      - name: Deploy to Cloudflare Pages
        run: node ./scripts/deployment-test/cf-pages.mjs
        env:
          CF_ACCOUNT_ID: ${{ secrets.TEST_CF_ACCOUNT_ID }}
          CF_GLOBAL_API_KEY: ${{ secrets.TEST_CF_GLOBAL_API_KEY }}
          CF_EMAIL: ${{ secrets.TEST_CF_EMAIL }}
          GITHUB_TOKEN: ${{ secrets.TEST_CF_GITHUB_TOKEN }}

  cf_workers_deploy:
    name: "CF Workers Deploy"
    needs: [build]
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - run: mkdir -p deployment-test

      - name: Install latest version of npm
        run: npm install -g npm@latest

      - name: Install Wrangler
        run: npm install -g @cloudflare/wrangler

      - name: Deploy to Cloudflare Workers
        run: node ./scripts/deployment-test/cf-workers.mjs
        env:
          CF_ACCOUNT_ID: ${{ secrets.TEST_CF_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.TEST_CF_API_TOKEN }}

  fly_deploy:
    name: "Fly Deploy"
    needs: [build]
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - run: mkdir -p deployment-test

      - name: Install latest version of npm
        run: npm install -g npm@latest

      - name: Install the Fly CLI
        run: curl -L https://fly.io/install.sh | FLYCTL_INSTALL=/usr/local sh

      - name: Deploy to Fly
        run: node ./scripts/deployment-test/fly.mjs
        env:
          FLY_API_TOKEN: ${{ secrets.TEST_FLY_TOKEN }}

  netlify_deploy:
    name: "Netlify Deploy"
    needs: [build]
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - run: mkdir -p deployment-test

      - name: Install latest version of npm
        run: npm install -g npm@latest

      - name: Deploy to Netlify
        run: node ./scripts/deployment-test/netlify.mjs
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.TEST_NETLIFY_TOKEN }}

  vercel_deploy:
    name: "Vercel Deploy"
    needs: [build]
    if: github.repository == 'remix-run/remix'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - run: echo "::set-output name=version::$(cat .nvmrc)"
        id: nvmrc

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvmrc.outputs.version }}"

      - run: echo "::set-output name=dir::$(yarn cache dir)"
        id: yarn-cache

      - name: Restore dependency cache
        uses: actions/cache@v2
        with:
          path: "${{ steps.yarn-cache.outputs.dir }}"
          key: ${{ runner.os }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

      - run: mkdir -p deployment-test

      - name: Install latest version of npm
        run: npm install -g npm@latest

      - name: Deploy to Vercel
        run: node ./scripts/deployment-test/vercel.mjs
        env:
          VERCEL_TOKEN: ${{ secrets.TEST_VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.TEST_VERCEL_USER_ID }}
